"""Builds the Scorecard database structure and populates it with data.

Functions:
    build_database(): calls functions to build tables and insert data.
    build_year_tables(): creates year tables.
    build_table(table_name): creates tables and adds appropriate columns.
    sanitize(string): checks strings for characters that could harm database.
    copy_table(source_table, target_table): makes a copy of an existing table.
"""
import json
import sqlite3

DATA_TYPES = None
DB_PATH = 'college-scorecard.sqlite'
CONN = None
CUR = None

def main():
    """Builds a database using data type input."""
    global DATA_TYPES
    with open('data_types.txt', 'r') as data_file:
        DATA_TYPES = json.loads(data_file.readline())

    global CONN
    CONN = sqlite3.connect(DB_PATH)
    global CUR
    CUR = CONN.cursor()

    build_database()

def initialize_database(db_path, data_types_path):
    """Sets the variables needed to build the database.

    Args:
        db_path: path to the database file to be created.
        data_types_path: path to the existing data types file generated
            by the decoder script.
    """
    global DB_PATH
    DB_PATH = db_path

    global DATA_TYPES
    with open(data_types_path, 'r') as data_file:
        DATA_TYPES = json.loads(data_file.readline())

    global CONN
    CONN = sqlite3.connect(DB_PATH)
    global CUR
    CUR = CONN.cursor()

def build_database():
    """Executes the functions that create the database tables."""
    build_table('College')
    build_year_tables()

def build_year_tables():
    """Executes table-building for the year data."""
    build_table('1999')
    for year in range(2000, 2014):
        copy_table('1999', str(year))

def build_table(table_name):
    """Creates database tables and adds appropriate columns.

    Uses the data_types file generated by the decoder.py script to determine
    the column names and types of data they hold.
    Data types with an index of 1 to 36 belong to the 'College' table because
    they are independent of the year. All other types that differ year-to-year
    belong in the year tables.

    Args:
        table_name: Name of the table ('College' or a year: '2000').
    """
    lower_limit = 1 if table_name == 'College' else 37
    upper_limit = 36 if table_name == 'College' else 1728
    autoincrement = "AUTOINCREMENT" if table_name == 'College' else ''

    CUR.execute('''
        CREATE TABLE IF NOT EXISTS "%s" (
        college_id INTEGER PRIMARY KEY %s
        )''' % (sanitize(table_name), autoincrement))

    for data_type in DATA_TYPES:
        if data_type[2] > upper_limit: break
        if data_type[2] < lower_limit: continue
        try:
            CUR.execute(
                '''ALTER TABLE "%s" ADD COLUMN %s %s''' %
                (sanitize(table_name), sanitize(data_type[0]),
                 sanitize(data_type[1])))
        except sqlite3.OperationalError:
            pass

def sanitize(string):
    """Checks input strings for harmful characters.

    Needed for table names, column names, and data types that
    cannot be specified with parameter substitution. Helps to prevent
    against SQL injections and unintended errors.

    Args:
        string: the string to sanitize.

    Returns:
        The string that was passed to the function.

    Raises:
        ValueError: The string contains an illegal character.
    """
    bad_chars = ['"', "'", ';', '\\', '/']
    for char in bad_chars:
        if char in string:
            raise ValueError('Table input contains ' + char)
    return string

def copy_table(source_table, target_table):
    """Create a copy of an existing database table with a different name.

    For the year tables, this is faster than looking through all the data types
    repeatedly.

    Args:
        source_table: string name of the existing table to be copied.
        target_table: string name of the new table.
    """
    CUR.execute(
        '''SELECT sql FROM sqlite_master WHERE type='table' AND name ="%s"
        ''' % (sanitize(source_table)))
    statement = CUR.fetchone()[0]
    new_statement = statement.replace(
        sanitize(source_table), sanitize(target_table), 1)
    CUR.execute(new_statement)

if __name__ == '__main__':
    main()
